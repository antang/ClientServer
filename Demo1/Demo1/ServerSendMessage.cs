///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Demo1
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ServerSendMessage recording.
    /// </summary>
    [TestModule("5f12c41d-dd78-44ca-8cd6-1b501a683dad", ModuleType.Recording, 1)]
    public partial class ServerSendMessage : ITestModule
    {
        /// <summary>
        /// Holds an instance of the Demo1Repository repository.
        /// </summary>
        public static Demo1Repository repo = Demo1Repository.Instance;

        static ServerSendMessage instance = new ServerSendMessage();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ServerSendMessage()
        {
            var_LinkServer = "D:\\Topic_Research\\Git\\ClientServer\\SERVER\\ServerTest\\bin\\Debug\\ServerTest.exe";
            var_IPServer = "";
            var_LinkClient = "D:\\Topic_Research\\Git\\ClientServer\\CLIENT\\ClientTest\\bin\\Debug\\ClientTest.exe";
            var_ConnectSuccessful = "is connecting with you";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ServerSendMessage Instance
        {
            get { return instance; }
        }

#region Variables

        string _var_LinkServer;

        /// <summary>
        /// Gets or sets the value of variable var_LinkServer.
        /// </summary>
        [TestVariable("0b833727-bb36-49c9-bd13-7f8a5dfae959")]
        public string var_LinkServer
        {
            get { return _var_LinkServer; }
            set { _var_LinkServer = value; }
        }

        string _var_IPServer;

        /// <summary>
        /// Gets or sets the value of variable var_IPServer.
        /// </summary>
        [TestVariable("94f23583-8ed1-4858-b768-a50c03ec3f1a")]
        public string var_IPServer
        {
            get { return _var_IPServer; }
            set { _var_IPServer = value; }
        }

        string _var_LinkClient;

        /// <summary>
        /// Gets or sets the value of variable var_LinkClient.
        /// </summary>
        [TestVariable("fc7111ba-74a9-425c-bcec-30f1be2bdf75")]
        public string var_LinkClient
        {
            get { return _var_LinkClient; }
            set { _var_LinkClient = value; }
        }

        string _var_ConnectSuccessful;

        /// <summary>
        /// Gets or sets the value of variable var_ConnectSuccessful.
        /// </summary>
        [TestVariable("059daaac-30f5-4812-bf20-319e25f45e05")]
        public string var_ConnectSuccessful
        {
            get { return _var_ConnectSuccessful; }
            set { _var_ConnectSuccessful = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.6")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "5.4.6")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 0;
            Delay.SpeedFactor = 1.0;

            Init();

            // Run Server
            Report.Log(ReportLevel.Info, "Application", "Run Server\r\nRun application with file name from variable $var_LinkServer with arguments '' in normal mode.", new RecordItemIndex(0));
            Host.Local.RunApplication(var_LinkServer, "", "D:\\Form KMS\\ClientServer-master\\ClientServer-master\\SERVER\\ServerTest\\bin\\Debug", false);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'Text' from item 'ServerSide.TxtIPServer' and assigning its value to variable 'var_IPServer'.", repo.ServerSide.TxtIPServerInfo, new RecordItemIndex(1));
            var_IPServer = repo.ServerSide.TxtIPServer.Element.GetAttributeValueText("Text");
            Delay.Milliseconds(0);
            
            // Run Client
            Report.Log(ReportLevel.Info, "Application", "Run Client\r\nRun application with file name from variable $var_LinkClient with arguments '' in normal mode.", new RecordItemIndex(2));
            Host.Local.RunApplication(var_LinkClient, "", "D:\\Form KMS\\ClientServer-master\\ClientServer-master\\CLIENT\\ClientTest\\bin\\Debug", false);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$var_IPServer' with focus on 'ClientSide.TxtIPAddress'.", repo.ClientSide.TxtIPAddressInfo, new RecordItemIndex(3));
            repo.ClientSide.TxtIPAddress.PressKeys(var_IPServer, 100);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ClientSide.BtnConnect' at Center.", repo.ClientSide.BtnConnectInfo, new RecordItemIndex(4));
            repo.ClientSide.BtnConnect.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (Text>$var_ConnectSuccessful) on item 'ClientSide.TxtChatScreen'.", repo.ClientSide.TxtChatScreenInfo, new RecordItemIndex(5));
            Validate.Attribute(repo.ClientSide.TxtChatScreenInfo, "Text", new Regex(Regex.Escape(var_ConnectSuccessful)));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
